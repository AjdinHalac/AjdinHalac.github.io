{"version":3,"file":"static/js/95.c259c44c.chunk.js","mappings":"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","sources":["views/landing/About.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/@chakra-ui/image/src/image.tsx","../node_modules/utilities/object-utils/src/omit.ts","../node_modules/@chakra-ui/layout/src/stack/h-stack.tsx","../node_modules/@chakra-ui/layout/src/divider.tsx"],"sourcesContent":["import { Box, Button, ButtonGroup, Card, CardHeader, Center, Container, Divider, Fade, Flex, HStack, Image, Stack, Text } from \"@chakra-ui/react\";\nimport { ReactElement, useState } from \"react\";\nimport { IExperience } from \"../../domain/landing/interfaces\";\nimport experience from \"../../experience\";\n\nconst About = (): ReactElement => {\n  const [selected, setSelected] = useState<IExperience>(experience[0]);\n\n  const handleSelected = (value: IExperience) => {\n    setSelected(value);\n  };\n\n  return (\n    <>\n      <Container maxW={\"3xl\"} id=\"about\">\n        <Stack\n          as={Box}\n          textAlign={\"center\"}\n          spacing={{ base: 8, md: 14 }}\n          pb={{ base: 20, md: 36 }}\n        >\n          <Stack align=\"center\" direction=\"row\" p={4}>\n            <HStack mx={4}>\n              <Text fontWeight={800}>About</Text>\n            </HStack>\n            <Divider orientation=\"horizontal\" />\n          </Stack>\n          <Text color={\"gray.600\"} fontSize={\"xl\"} px={4}>\n            A product-focused Software Developer with experience in Startups,\n            Scaleups, and Enterprise. Looking for constant improvement with\n            anything related to code, able to contribute to Frontend and DevOps\n            but with specialization, previous experiences, and core focus on\n            Backend Development, Microservices, and Domain Driven Design.\n            Continuously exploring Optimization and Software Architecture.\n            Previous domains include Gambling, AI, Biotech, Identity, and\n            Marketplace, but open to exploring other options. Currently working\n            with GoLang and Java. Hobbies include creating Robots using Arduino\n            and Raspberry.\n          </Text>\n        </Stack>\n      </Container>\n      <Container maxW={\"3xl\"} id=\"experience\">\n        <Stack\n          as={Box}\n          textAlign={\"center\"}\n          spacing={{ base: 8, md: 14 }}\n          pb={{ base: 20, md: 36 }}\n        >\n          <Stack align=\"center\" direction=\"row\" p={4}>\n            <HStack mx={4}>\n              <Text fontWeight={800}>Experience</Text>\n            </HStack>\n            <Divider orientation=\"horizontal\" />\n          </Stack>\n          <Center px={4}>\n            <ButtonGroup variant=\"outline\">\n              {experience.map((option: IExperience) => (\n                <Button\n                  colorScheme={\n                    selected.value === option.value ? \"teal\" : \"gray\"\n                  }\n                  onClick={() => handleSelected(option)}\n                >\n                  {option.value}\n                </Button>\n              ))}\n            </ButtonGroup>\n          </Center>\n          <Stack>\n            <Fade in={!!selected}>\n              <Card key={selected.company} size=\"lg\">\n                <CardHeader>\n                  <Flex justifyContent=\"space-between\">\n                    <HStack>\n                      <Image h={\"auto\"} w={\"50px\"} src={require(`../../images/${selected.image}`)} />\n                      <Box px={2}>\n                        <Text fontWeight={600}>{selected.company}</Text>\n                        <Text>{selected.position}</Text>\n                      </Box>\n                    </HStack>\n                    <Text px={2} fontWeight={300}>\n                      {selected.duration}\n                    </Text>\n                  </Flex>\n                </CardHeader>\n              </Card>\n            </Fade>\n          </Stack>\n        </Stack>\n      </Container>\n    </>\n  );\n};\n\nexport default About;\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note 🚨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a horizontal line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nHStack.displayName = \"HStack\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\n/**\n * Layout component used to visually separate content in a list or group.\n * It displays a thin horizontal or vertical line, and renders a `hr` tag.\n *\n * @see Docs https://chakra-ui.com/divider\n */\nexport const Divider = forwardRef<DividerProps, \"hr\">(function Divider(\n  props,\n  ref,\n) {\n  const {\n    borderLeftWidth,\n    borderBottomWidth,\n    borderTopWidth,\n    borderRightWidth,\n    borderWidth,\n    borderStyle,\n    borderColor,\n    ...styles\n  } = useStyleConfig(\"Divider\", props)\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemingProps(props)\n\n  const dividerStyles = {\n    vertical: {\n      borderLeftWidth:\n        borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n      height: \"100%\",\n    },\n    horizontal: {\n      borderBottomWidth:\n        borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n      width: \"100%\",\n    },\n  }\n\n  return (\n    <chakra.hr\n      ref={ref}\n      aria-orientation={orientation}\n      {...rest}\n      __css={{\n        ...styles,\n        border: \"0\",\n\n        borderColor,\n        borderStyle,\n        ...dividerStyles[orientation],\n        ...__css,\n      }}\n      className={cx(\"chakra-divider\", className)}\n    />\n  )\n})\n\nexport interface DividerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Divider\"> {\n  orientation?: \"horizontal\" | \"vertical\"\n}\n\nDivider.displayName = \"Divider\"\n"],"names":["_useState","useState","experience","_useState2","_slicedToArray","selected","setSelected","_jsxs","_Fragment","children","_jsx","Container","maxW","id","Stack","as","Box","textAlign","spacing","base","md","pb","align","direction","p","HStack","mx","Text","fontWeight","Divider","orientation","color","fontSize","px","Center","ButtonGroup","variant","map","option","Button","colorScheme","value","onClick","Fade","in","Card","size","CardHeader","Flex","justifyContent","Image","h","w","src","require","concat","image","company","position","duration","_createStylesContext","createStylesContext","_createStylesContext2","CardStylesProvider","useCardStyles","forwardRef","props","ref","_omitThemingProps","omitThemingProps","className","_omitThemingProps$dir","justify","rest","_objectWithoutProperties","_excluded","styles","useMultiStyleConfig","jsx","chakra","div","_objectSpread","cx","__css","display","flexDirection","alignItems","minWidth","wordWrap","container","NativeImage","htmlWidth","htmlHeight","alt","width","height","displayName","fallbackSrc","fallback","srcSet","fit","loading","ignoreFallback","crossOrigin","_props$fallbackStrate","fallbackStrategy","referrerPolicy","shouldIgnoreFallbackImage","status","onLoad","onError","sizes","setStatus","useEffect","imageRef","useRef","load","useCallback","flush","img","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","useImage","showFallbackImage","shouldShowFallbackImage","shared","objectFit","objectPosition","object","_step","keysToOmit","arguments","length","undefined","clone","Object","assign","_iterator","_createForOfIteratorHelper","s","n","done","key","err","e","f","omit","_useStyleConfig","useStyleConfig","borderLeftWidth","borderBottomWidth","borderTopWidth","borderRightWidth","borderWidth","borderStyle","borderColor","_omitThemingProps$ori","_excluded2","dividerStyles","vertical","horizontal","hr","border"],"sourceRoot":""}