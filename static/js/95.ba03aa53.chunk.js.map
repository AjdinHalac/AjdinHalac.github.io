{"version":3,"file":"static/js/95.ba03aa53.chunk.js","mappings":"wVA+GA,UAzGc,WACZ,IAAAA,GAAgCC,EAAAA,EAAAA,UAAsBC,EAAAA,EAAW,IAAGC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAA7DK,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAM5B,OACEI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,KAAM,MAAOC,GAAG,QAAOJ,UAChCF,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CACJC,GAAIC,EAAAA,GACJC,UAAW,SACXC,QAAS,CAAEC,KAAM,EAAGC,GAAI,IACxBC,GAAI,CAAEF,KAAM,GAAIC,GAAI,IAAKX,SAAA,EAEzBF,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAACQ,MAAM,SAASC,UAAU,MAAMC,EAAG,EAAEf,SAAA,EACzCC,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CAACC,GAAI,EAAEjB,UACZC,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAACC,WAAY,IAAInB,SAAC,aAEzBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAO,CAACC,YAAY,mBAEvBpB,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAACI,MAAO,WAAYC,SAAU,KAAMC,GAAI,EAAExB,SAAC,mmBAcpDC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,KAAM,MAAOC,GAAG,aAAYJ,UACrCF,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CACJC,GAAIC,EAAAA,GACJC,UAAW,SACXC,QAAS,CAAEC,KAAM,EAAGC,GAAI,IACxBC,GAAI,CAAEF,KAAM,GAAIC,GAAI,IAAKX,SAAA,EAEzBF,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAACQ,MAAM,SAASC,UAAU,MAAMC,EAAG,EAAEf,SAAA,EACzCC,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CAACC,GAAI,EAAEjB,UACZC,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAACC,WAAY,IAAInB,SAAC,kBAEzBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAO,CAACC,YAAY,mBAEvBpB,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACD,GAAI,EAAExB,UACZC,EAAAA,EAAAA,KAACyB,EAAAA,EAAW,CAACC,QAAQ,UAAS3B,SAC3BP,EAAAA,EAAWmC,KAAI,SAACC,GAAmB,OAClC5B,EAAAA,EAAAA,KAAC6B,EAAAA,EAAM,CACLC,YACEnC,EAASoC,QAAUH,EAAOG,MAAQ,OAAS,OAE7CC,QAAS,WApDvBpC,EAoD4CgC,EAAO,EAAC7B,SAErC6B,EAAOG,OACD,SAIf/B,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CAAAL,UACJC,EAAAA,EAAAA,KAACiC,EAAAA,EAAI,CAACC,KAAMvC,EAASI,UACnBF,EAAAA,EAAAA,MAACsC,EAAAA,EAAI,CAAwBC,KAAK,KAAIrC,SAAA,EACpCC,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAAAtC,UACTF,EAAAA,EAAAA,MAACyC,EAAAA,EAAI,CAACC,eAAe,gBAAexC,SAAA,EAClCF,EAAAA,EAAAA,MAACkB,EAAAA,EAAM,CAAAhB,SAAA,EACLC,EAAAA,EAAAA,KAACwC,EAAAA,EAAK,CAACC,EAAG,OAAQC,EAAG,OAAQC,IAAKC,EAAAA,KAAAA,CAAQ,KAADC,OAAiBlD,EAASmD,WACnEjD,EAAAA,EAAAA,MAACS,EAAAA,GAAG,CAACiB,GAAI,EAAExB,SAAA,EACTC,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAACC,WAAY,IAAInB,SAAEJ,EAASoD,WACjC/C,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAAAlB,SAAEJ,EAASqD,kBAGpBhD,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAACM,GAAI,EAAGL,WAAY,IAAInB,SAC1BJ,EAASsD,iBAIhBjD,EAAAA,EAAAA,KAACkD,EAAAA,EAAQ,CAAAnD,UACPC,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAAAvC,UACHC,EAAAA,EAAAA,KAACmD,EAAAA,GAAI,CAAC3C,QAAS,EAAET,SACdJ,EAASyD,UAAUzB,KAAI,SAAC0B,EAAMC,GAAK,OAClCzD,EAAAA,EAAAA,MAAC0D,EAAAA,GAAQ,CAAAxD,SAAA,EACPC,EAAAA,EAAAA,KAACwD,EAAAA,GAAQ,CACPC,QAAS,EACTpD,GAAIqD,EAAAA,EACJrC,MAAO,aAERgC,IANYC,EAOJ,YA1BV3D,EAASoD,oBAsClC,C","sources":["views/landing/About.tsx"],"sourcesContent":["import { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport { Box, Button, ButtonGroup, Card, CardBody, CardHeader, Center, Container, Divider, Fade, Flex, HStack, Image, List, ListIcon, ListItem, Stack, Text } from \"@chakra-ui/react\";\nimport { ReactElement, useState } from \"react\";\nimport { IExperience } from \"../../domain/landing/interfaces\";\nimport experience from \"../../experience\";\n\nconst About = (): ReactElement => {\n  const [selected, setSelected] = useState<IExperience>(experience[0]);\n\n  const handleSelected = (value: IExperience) => {\n    setSelected(value);\n  };\n\n  return (\n    <>\n      <Container maxW={\"3xl\"} id=\"about\">\n        <Stack\n          as={Box}\n          textAlign={\"center\"}\n          spacing={{ base: 8, md: 14 }}\n          pb={{ base: 20, md: 36 }}\n        >\n          <Stack align=\"center\" direction=\"row\" p={4}>\n            <HStack mx={4}>\n              <Text fontWeight={800}>About</Text>\n            </HStack>\n            <Divider orientation=\"horizontal\" />\n          </Stack>\n          <Text color={\"gray.600\"} fontSize={\"xl\"} px={4}>\n            A product-focused Software Developer with experience in Startups,\n            Scaleups, and Enterprise. Looking for constant improvement with\n            anything related to code, able to contribute to Frontend and DevOps\n            but with specialization, previous experiences, and core focus on\n            Backend Development, Microservices, and Domain Driven Design.\n            Continuously exploring Optimization and Software Architecture.\n            Previous domains include Gambling, AI, Biotech, Identity, and\n            Marketplace, but open to exploring other options. Currently working\n            with GoLang and Java. Hobbies include creating Robots using Arduino\n            and Raspberry.\n          </Text>\n        </Stack>\n      </Container>\n      <Container maxW={\"3xl\"} id=\"experience\">\n        <Stack\n          as={Box}\n          textAlign={\"center\"}\n          spacing={{ base: 8, md: 14 }}\n          pb={{ base: 20, md: 36 }}\n        >\n          <Stack align=\"center\" direction=\"row\" p={4}>\n            <HStack mx={4}>\n              <Text fontWeight={800}>Experience</Text>\n            </HStack>\n            <Divider orientation=\"horizontal\" />\n          </Stack>\n          <Center px={4}>\n            <ButtonGroup variant=\"outline\">\n              {experience.map((option: IExperience) => (\n                <Button\n                  colorScheme={\n                    selected.value === option.value ? \"teal\" : \"gray\"\n                  }\n                  onClick={() => handleSelected(option)}\n                >\n                  {option.value}\n                </Button>\n              ))}\n            </ButtonGroup>\n          </Center>\n          <Stack>\n            <Fade in={!!selected}>\n              <Card key={selected.company} size=\"lg\">\n                <CardHeader>\n                  <Flex justifyContent=\"space-between\">\n                    <HStack>\n                      <Image h={\"auto\"} w={\"50px\"} src={require(`../../images/${selected.image}`)} />\n                      <Box px={2}>\n                        <Text fontWeight={600}>{selected.company}</Text>\n                        <Text>{selected.position}</Text>\n                      </Box>\n                    </HStack>\n                    <Text px={2} fontWeight={300}>\n                      {selected.duration}\n                    </Text>\n                  </Flex>\n                </CardHeader>\n                <CardBody>\n                  <Flex>\n                    <List spacing={3}>\n                      {selected.listItems.map((item, index) => (\n                        <ListItem key={index}>\n                          <ListIcon\n                            boxSize={6}\n                            as={ChevronRightIcon}\n                            color={\"teal.500\"}\n                          />\n                          {item}\n                        </ListItem>\n                      ))}\n                    </List>\n                  </Flex>\n                </CardBody>\n              </Card>\n            </Fade>\n          </Stack>\n        </Stack>\n      </Container>\n    </>\n  );\n};\n\nexport default About;\n"],"names":["_useState","useState","experience","_useState2","_slicedToArray","selected","setSelected","_jsxs","_Fragment","children","_jsx","Container","maxW","id","Stack","as","Box","textAlign","spacing","base","md","pb","align","direction","p","HStack","mx","Text","fontWeight","Divider","orientation","color","fontSize","px","Center","ButtonGroup","variant","map","option","Button","colorScheme","value","onClick","Fade","in","Card","size","CardHeader","Flex","justifyContent","Image","h","w","src","require","concat","image","company","position","duration","CardBody","List","listItems","item","index","ListItem","ListIcon","boxSize","ChevronRightIcon"],"sourceRoot":""}