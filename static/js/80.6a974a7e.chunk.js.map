{"version":3,"file":"static/js/80.6a974a7e.chunk.js","mappings":"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","sources":["components/common/PasswordInput.tsx","utils/helpers.ts","views/landing/AcceptInvite.tsx"],"sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  IconButton,\n  Input,\n  InputGroup,\n  InputProps,\n  InputRightElement,\n  useDisclosure,\n  useMergeRefs,\n} from \"@chakra-ui/react\";\nimport { forwardRef, useRef } from \"react\";\nimport { HiEye, HiEyeOff } from \"react-icons/hi\";\n\ninterface IPasswordInputProps extends InputProps {\n  label: string;\n}\n\nexport const PasswordField = forwardRef<HTMLInputElement, IPasswordInputProps>(\n  (props, ref) => {\n    const { isOpen, onToggle } = useDisclosure();\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const mergeRef = useMergeRefs(inputRef, ref);\n    const onClickReveal = () => {\n      onToggle();\n      if (inputRef.current) {\n        inputRef.current.focus({ preventScroll: true });\n      }\n    };\n\n    return (\n      <FormControl>\n        <FormLabel htmlFor=\"password\">{props.label}</FormLabel>\n        <InputGroup>\n          <InputRightElement>\n            <IconButton\n              color={\"teal.500\"}\n              variant=\"text\"\n              aria-label={isOpen ? \"Hide\" : \"Show\"}\n              icon={isOpen ? <HiEyeOff /> : <HiEye />}\n              onClick={onClickReveal}\n            />\n          </InputRightElement>\n          <Input\n            id=\"password\"\n            ref={mergeRef}\n            name=\"password\"\n            type={isOpen ? \"text\" : \"password\"}\n            autoComplete=\"current-password\"\n            required\n            {...props}\n          />\n        </InputGroup>\n      </FormControl>\n    );\n  }\n);\n\nPasswordField.displayName = \"PasswordField\";\n","import querystring from 'querystring';\n\nexport function createQueryString(paginator: any) {\n    return querystring.stringify(paginator);\n}\n\nexport const truncate = (str: string, n: number, ellipsis: string) => {\n    const tooLong = str.length > n;\n    const singular = str.search(/\\s/) === -1;\n\n    // Edge case where someone enters a ridiculously long string.\n    str = tooLong ? str.substr(0, n - 1) : str;\n\n    if (!singular) {\n        str = ellipsis && tooLong ? str.substr(0, str.lastIndexOf(' ')) : str;\n    }\n\n    return tooLong ? str + ellipsis : str;\n};\n\nexport const parseError = (error: any, fallbackErrorMessage = '') => {\n    const errorData = error?.response?.data?.error;\n\n    if (errorData === undefined) {\n        return 'Unexpected error occurred...'\n    }\n\n    switch (errorData.code) {\n        case '0':\n            return errorData.message;\n        case 'TOKEN.020':\n            return 'Token does not exist.'\n        case 'TOKEN.030':\n            return 'Token could not be verified.'\n        case 'TOKEN.040':\n            return 'Token could not be deleted.'\n        default:\n            return fallbackErrorMessage;\n    }\n};\n\nexport const isNullOrUndefined = (value?: unknown): boolean => {\n    return value === undefined || value === null;\n};\n\nexport const isEmailValid = (email: string) => {\n    const re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n};\n\nexport const isEventKeyEnter = (event: any) => {\n    return event.key === 'Enter';\n};\n","import React, { ReactElement, useState } from \"react\";\nimport { Link, useSearchParams } from \"react-router-dom\";\n\nimport ApiCalls from \"../../domain/landing/api/ApiCalls\";\nimport { parseError } from \"../../utils/helpers\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Container,\n  FormControl,\n  HStack,\n  Heading,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { ajaxService } from \"../../services/AjaxService\";\nimport { cookieService } from \"../../services/CookieService\";\nimport { Logo } from \"../../components/common/Logo\";\nimport { PasswordField } from \"../../components/common/PasswordInput\";\n\nconst AcceptInvite = (): ReactElement => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const token = searchParams.get(\"token\");\n  const toast = useToast();\n\n  if (cookieService.isAuthenticated()) {\n    window.location.replace(\"/\");\n  }\n\n  const [password, setPassword] = useState<string>(\"\");\n  const [tos, setTos] = useState<boolean>(false);\n\n  const onAcceptInviteClick = async () => {\n    try {\n      const newCredentials = await ApiCalls.acceptInvite({\n        payload: { token: token ? token : \"invalid\", password: password },\n      });\n\n      ajaxService.setAuthToken(\n        newCredentials?.data?.accessToken,\n        newCredentials?.data?.refreshToken\n      );\n      window.location.replace(\"/\");\n    } catch (err) {\n\t\ttoast({\n\t\t\ttitle: parseError(err),\n\t\t\tposition: 'top-right',\n\t\t\tduration: 5000,\n\t\t\tisClosable: true,\n\t\t\tstatus: 'error',\n\t\t});\n    }\n  };\n\n  return (\n    <Container\n      maxW=\"lg\"\n      py={{ base: \"12\", md: \"24\" }}\n      px={{ base: \"0\", sm: \"8\" }}\n    >\n      <Stack spacing=\"8\">\n        <Stack spacing=\"6\">\n          <Logo color={\"teal.500\"} />\n          <Stack spacing={{ base: \"2\", md: \"3\" }} textAlign=\"center\">\n            <Heading size={{ base: \"xs\", md: \"sm\" }}>\n              Accept invite\n            </Heading>\n            <Text color=\"fg.muted\">\n              Already have an account?{\" \"}\n              <Box as=\"span\" color={\"teal.500\"}>\n                <Link to=\"/signin\">Sign in</Link>\n              </Box>\n            </Text>\n          </Stack>\n        </Stack>\n        <Box\n          py={{ base: \"0\", sm: \"8\" }}\n          px={{ base: \"4\", sm: \"10\" }}\n          bg={{ base: \"transparent\", sm: \"bg.surface\" }}\n          boxShadow={{ base: \"none\", sm: \"md\" }}\n          borderRadius={{ base: \"none\", sm: \"xl\" }}\n        >\n          <Stack spacing=\"6\">\n            <Stack spacing=\"5\">\n              <FormControl >\n                <PasswordField\n                  label=\"Password\"\n                  value={password}\n                  onChange={(e: any) => setPassword(e.currentTarget.value)}\n                />\n              </FormControl>\n            </Stack>\n            <HStack justify=\"space-between\">\n              <Checkbox\n                colorScheme={\"teal\"}\n                isChecked={tos}\n                onChange={(e: any) => setTos(e.currentTarget.checked)}\n                my={2}\n              >\n                <Text color=\"fg.muted\">\n                  I agree to the{\" \"}\n                  <Box as=\"span\" color={\"teal.500\"}>\n                    <Link to=\"/tos\">Terms of service</Link>\n                  </Box>\n                </Text>\n              </Checkbox>\n            </HStack>\n            <Stack spacing=\"6\">\n              <Button colorScheme=\"teal\" onClick={onAcceptInviteClick}>Accept invite</Button>\n            </Stack>\n          </Stack>\n        </Box>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default AcceptInvite;\n"],"names":["PasswordField","forwardRef","props","ref","_useDisclosure","useDisclosure","isOpen","onToggle","inputRef","useRef","mergeRef","useMergeRefs","_jsxs","FormControl","children","_jsx","FormLabel","htmlFor","label","InputGroup","InputRightElement","IconButton","color","variant","icon","HiEyeOff","HiEye","onClick","current","focus","preventScroll","Input","_objectSpread","id","name","type","autoComplete","required","displayName","truncate","str","n","ellipsis","tooLong","length","singular","search","substr","lastIndexOf","parseError","error","_error$response","_error$response$data","fallbackErrorMessage","arguments","undefined","errorData","response","data","code","message","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","token","get","toast","useToast","cookieService","isAuthenticated","window","location","replace","_useState","useState","_useState2","password","setPassword","_useState3","_useState4","tos","setTos","onAcceptInviteClick","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_newCredentials$data","_newCredentials$data2","newCredentials","wrap","_context","prev","next","ApiCalls","acceptInvite","payload","sent","ajaxService","setAuthToken","accessToken","refreshToken","t0","title","position","duration","isClosable","status","stop","apply","Container","maxW","py","base","md","px","sm","Stack","spacing","Logo","textAlign","Heading","size","Text","Box","as","Link","to","bg","boxShadow","borderRadius","value","onChange","e","currentTarget","HStack","justify","Checkbox","colorScheme","isChecked","checked","my","Button"],"sourceRoot":""}