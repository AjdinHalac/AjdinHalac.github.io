{"version":3,"file":"static/js/417.b99dc8e0.chunk.js","mappings":"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","sources":["utils/helpers.ts","views/landing/ForgotPassword.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import querystring from 'querystring';\n\nexport function createQueryString(paginator: any) {\n    return querystring.stringify(paginator);\n}\n\nexport const truncate = (str: string, n: number, ellipsis: string) => {\n    const tooLong = str.length > n;\n    const singular = str.search(/\\s/) === -1;\n\n    // Edge case where someone enters a ridiculously long string.\n    str = tooLong ? str.substr(0, n - 1) : str;\n\n    if (!singular) {\n        str = ellipsis && tooLong ? str.substr(0, str.lastIndexOf(' ')) : str;\n    }\n\n    return tooLong ? str + ellipsis : str;\n};\n\nexport const parseError = (error: any, fallbackErrorMessage = '') => {\n    const errorData = error?.response?.data?.error;\n\n    if (errorData === undefined) {\n        return 'Unexpected error occurred...'\n    }\n\n    switch (errorData.code) {\n        case '0':\n            return errorData.message;\n        case 'TOKEN.020':\n            return 'Token does not exist.'\n        case 'TOKEN.030':\n            return 'Token could not be verified.'\n        case 'TOKEN.040':\n            return 'Token could not be deleted.'\n        default:\n            return fallbackErrorMessage;\n    }\n};\n\nexport const isNullOrUndefined = (value?: unknown): boolean => {\n    return value === undefined || value === null;\n};\n\nexport const isEmailValid = (email: string) => {\n    const re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n};\n\nexport const isEventKeyEnter = (event: any) => {\n    return event.key === 'Enter';\n};\n","import React, { ReactElement, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport ApiCalls from \"../../domain/landing/api/ApiCalls\";\nimport { parseError } from \"../../utils/helpers\";\nimport {\n  Box,\n  Button,\n  Center,\n  Container,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { Logo } from \"../../components/common/Logo\";\nimport { AiOutlineCheckCircle } from \"react-icons/ai\";\nimport { cookieService } from \"../../services/CookieService\";\n\nconst ForgotPassword = (): ReactElement => {\n  const toast = useToast();\n\n  if (cookieService.isAuthenticated()) {\n    window.location.replace(\"/\");\n  }\n\n  const [email, setEmail] = useState<string>(\"\");\n  const [success, setSuccess] = useState<boolean>(false);\n\n  const onForgotPasswordClick = async () => {\n    try {\n      await ApiCalls.forgotPassword({ payload: { email } });\n      setSuccess(true);\n      toast({\n        title: \"Email sent\",\n        position: \"top-right\",\n        duration: 5000,\n        isClosable: true,\n        status: \"success\",\n      });\n    } catch (err) {\n      toast({\n        title: parseError(err),\n        position: \"top-right\",\n        duration: 5000,\n        isClosable: true,\n        status: \"error\",\n      });\n    }\n  };\n\n  return (\n    <Container\n      maxW=\"lg\"\n      py={{ base: \"12\", md: \"24\" }}\n      px={{ base: \"0\", sm: \"8\" }}\n    >\n      <Stack spacing=\"8\">\n        <Stack spacing=\"6\">\n          <Logo color={\"teal.500\"} />\n          <Stack spacing={{ base: \"2\", md: \"3\" }} textAlign=\"center\">\n            <Heading size={{ base: \"xs\", md: \"sm\" }}>Account recovery</Heading>\n            <Text color=\"fg.muted\">\n              Don't have an account?{\" \"}\n              <Box as=\"span\" color={\"teal.500\"}>\n                <Link to=\"/signup\">\n                  Sign up\n                </Link>\n              </Box>\n            </Text>\n          </Stack>\n        </Stack>\n        <Box\n          py={{ base: \"0\", sm: \"8\" }}\n          px={{ base: \"4\", sm: \"10\" }}\n          bg={{ base: \"transparent\", sm: \"bg.surface\" }}\n          boxShadow={{ base: \"none\", sm: \"md\" }}\n          borderRadius={{ base: \"none\", sm: \"xl\" }}\n        >\n          <Stack spacing=\"6\">\n            <Stack spacing=\"5\">\n              <FormControl hidden={success}>\n                <FormLabel htmlFor=\"email\">Email</FormLabel>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e: any) => setEmail(e.currentTarget.value)}\n                />\n              </FormControl>\n\n              <Box hidden={!success}>\n                <Center color={\"teal.500\"}>\n                  <AiOutlineCheckCircle size={\"6rem\"} />\n                </Center>\n                <Heading my={2} size={{ base: \"xs\", md: \"sm\" }}>\n                  Email sent\n                </Heading>\n                <Text color=\"fg.muted\">\n                  Check your email and click the link to continue.\n                </Text>\n              </Box>\n            </Stack>\n            <Stack hidden={success} spacing=\"6\">\n              <Button colorScheme=\"teal\" onClick={onForgotPasswordClick}>\n                Send link to email\n              </Button>\n            </Stack>\n          </Stack>\n        </Box>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default ForgotPassword;\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["createQueryString","paginator","querystring","truncate","str","n","ellipsis","tooLong","length","singular","search","substr","lastIndexOf","parseError","error","_error$response","_error$response$data","fallbackErrorMessage","arguments","undefined","errorData","response","data","code","message","toast","useToast","cookieService","isAuthenticated","window","location","replace","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","success","setSuccess","onForgotPasswordClick","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","ApiCalls","forgotPassword","payload","title","position","duration","isClosable","status","t0","stop","apply","_jsx","Container","maxW","py","base","md","px","sm","children","_jsxs","Stack","spacing","Logo","color","textAlign","Heading","size","Text","Box","as","Link","to","bg","boxShadow","borderRadius","FormControl","hidden","FormLabel","htmlFor","Input","id","type","value","onChange","e","currentTarget","Center","AiOutlineCheckCircle","my","Button","colorScheme","onClick","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","className","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","_objectSpread","jsxs","chakra","label","cx","__css","display","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","_createContext","createContext","name","errorMessage","_createContext2","FormControlStylesProvider","_createContext3","strict","_createContext4","FormControlProvider","useMultiStyleConfig","_useFormControlProvid","idProp","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","concat","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","props2","forwardedRef","mergeRefs","node","dataAttr","getErrorMessageProps","getRootProps","role","onFocus","onBlur","useFormControlProvider","context","_excluded2","div","helperText","useFormControl","_useFormControlProps","useFormControlProps","disabled","readOnly","required","ariaAttr","_b","_c","labelIds","push","join","callAllHandlers","htmlSize","input","_className"],"sourceRoot":""}