{"version":3,"file":"static/js/853.abdab11f.chunk.js","mappings":"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","sources":["components/common/PasswordInput.tsx","utils/helpers.ts","views/landing/SignIn.tsx"],"sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  IconButton,\n  Input,\n  InputGroup,\n  InputProps,\n  InputRightElement,\n  useDisclosure,\n  useMergeRefs,\n} from \"@chakra-ui/react\";\nimport { forwardRef, useRef } from \"react\";\nimport { HiEye, HiEyeOff } from \"react-icons/hi\";\n\ninterface IPasswordInputProps extends InputProps {\n  label: string;\n}\n\nexport const PasswordField = forwardRef<HTMLInputElement, IPasswordInputProps>(\n  (props, ref) => {\n    const { isOpen, onToggle } = useDisclosure();\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const mergeRef = useMergeRefs(inputRef, ref);\n    const onClickReveal = () => {\n      onToggle();\n      if (inputRef.current) {\n        inputRef.current.focus({ preventScroll: true });\n      }\n    };\n\n    return (\n      <FormControl>\n        <FormLabel htmlFor=\"password\">{props.label}</FormLabel>\n        <InputGroup>\n          <InputRightElement>\n            <IconButton\n              color={\"teal.500\"}\n              variant=\"text\"\n              aria-label={isOpen ? \"Hide\" : \"Show\"}\n              icon={isOpen ? <HiEyeOff /> : <HiEye />}\n              onClick={onClickReveal}\n            />\n          </InputRightElement>\n          <Input\n            id=\"password\"\n            ref={mergeRef}\n            name=\"password\"\n            type={isOpen ? \"text\" : \"password\"}\n            autoComplete=\"current-password\"\n            required\n            {...props}\n          />\n        </InputGroup>\n      </FormControl>\n    );\n  }\n);\n\nPasswordField.displayName = \"PasswordField\";\n","import querystring from 'querystring';\n\nexport function createQueryString(paginator: any) {\n    return querystring.stringify(paginator);\n}\n\nexport const truncate = (str: string, n: number, ellipsis: string) => {\n    const tooLong = str.length > n;\n    const singular = str.search(/\\s/) === -1;\n\n    // Edge case where someone enters a ridiculously long string.\n    str = tooLong ? str.substr(0, n - 1) : str;\n\n    if (!singular) {\n        str = ellipsis && tooLong ? str.substr(0, str.lastIndexOf(' ')) : str;\n    }\n\n    return tooLong ? str + ellipsis : str;\n};\n\nexport const parseError = (error: any, fallbackErrorMessage = '') => {\n    const errorData = error?.response?.data?.error;\n\n    if (errorData === undefined) {\n        return 'Unexpected error occurred...'\n    }\n\n    switch (errorData.code) {\n        case '0':\n            return errorData.message;\n        case 'TOKEN.020':\n            return 'Token does not exist.'\n        case 'TOKEN.030':\n            return 'Token could not be verified.'\n        case 'TOKEN.040':\n            return 'Token could not be deleted.'\n        default:\n            return fallbackErrorMessage;\n    }\n};\n\nexport const isNullOrUndefined = (value?: unknown): boolean => {\n    return value === undefined || value === null;\n};\n\nexport const isEmailValid = (email: string) => {\n    const re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n};\n\nexport const isEventKeyEnter = (event: any) => {\n    return event.key === 'Enter';\n};\n","import React, { ReactElement, useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport ApiCalls from \"../../domain/landing/api/ApiCalls\";\nimport { parseError } from \"../../utils/helpers\";\nimport { ajaxService } from \"../../services/AjaxService\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Container,\n  FormControl,\n  FormLabel,\n  HStack,\n  Heading,\n  Input,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { PasswordField } from \"../../components/common/PasswordInput\";\nimport { Logo } from \"../../components/common/Logo\";\nimport { cookieService } from \"../../services/CookieService\";\n\nconst SignIn = (): ReactElement => {\n  const navigate = useNavigate();\n  const toast = useToast();\n\n  if (cookieService.isAuthenticated()) {\n    window.location.replace(\"/\");\n  }\n\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [remmemberMe, setRemmemberMe] = useState<boolean>(true);\n\n  const onLoginClick = async () => {\n    try {\n      const newCredentials = await ApiCalls.login({\n        payload: { email, password: password },\n      });\n      ajaxService.setAuthToken(\n        newCredentials?.data?.accessToken,\n        remmemberMe ? newCredentials?.data?.refreshToken : null\n      );\n      window.location.replace(\"/\");\n    } catch (err) {\n      toast({\n        title: parseError(err),\n        position: \"top-right\",\n        duration: 5000,\n        isClosable: true,\n        status: \"error\",\n      });\n    }\n  };\n\n  return (\n    <Container\n      maxW=\"lg\"\n      py={{ base: \"12\", md: \"24\" }}\n      px={{ base: \"0\", sm: \"8\" }}\n    >\n      <Stack spacing=\"8\">\n        <Stack spacing=\"6\">\n          <Logo color={\"teal.500\"} />\n          <Stack spacing={{ base: \"2\", md: \"3\" }} textAlign=\"center\">\n            <Heading size={{ base: \"xs\", md: \"sm\" }}>\n              Sign in to your account\n            </Heading>\n            <Text color=\"fg.muted\">\n              Don't have an account?{\" \"}\n              <Box as=\"span\" color={\"teal.500\"}>\n                <Link to=\"/signup\">\n                  Sign up\n                </Link>\n              </Box>\n            </Text>\n          </Stack>\n        </Stack>\n        <Box\n          py={{ base: \"0\", sm: \"8\" }}\n          px={{ base: \"4\", sm: \"10\" }}\n          bg={{ base: \"transparent\", sm: \"bg.surface\" }}\n          boxShadow={{ base: \"none\", sm: \"md\" }}\n          borderRadius={{ base: \"none\", sm: \"xl\" }}\n        >\n          <Stack spacing=\"6\">\n            <Stack spacing=\"5\">\n              <FormControl>\n                <FormLabel htmlFor=\"email\">Email</FormLabel>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e: any) => setEmail(e.currentTarget.value)}\n                />\n              </FormControl>\n              <PasswordField\n                label=\"Password\"\n                value={password}\n                onChange={(e: any) => setPassword(e.currentTarget.value)}\n              />\n            </Stack>\n            <HStack justify=\"space-between\">\n              <Checkbox\n                colorScheme={\"teal\"}\n                isChecked={remmemberMe}\n                onChange={(e: any) => setRemmemberMe(e.currentTarget.checked)}\n                my={2}\n              >\n                Remember me\n              </Checkbox>\n              <Button\n                color={\"teal.500\"}\n                variant=\"text\"\n                size=\"sm\"\n                onClick={() => navigate(\"/forgot-password\")}\n              >\n                Forgot password?\n              </Button>\n            </HStack>\n            <Stack spacing=\"6\">\n              <Button colorScheme=\"teal\" onClick={onLoginClick}>\n                Sign in\n              </Button>\n              {/*<Divider />\n                <Button flexGrow={1}>\n                  <GoogleIcon /> Continue with Google{\" \"}\n                </Button>*/}\n            </Stack>\n          </Stack>\n        </Box>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default SignIn;\n"],"names":["PasswordField","forwardRef","props","ref","_useDisclosure","useDisclosure","isOpen","onToggle","inputRef","useRef","mergeRef","useMergeRefs","_jsxs","FormControl","children","_jsx","FormLabel","htmlFor","label","InputGroup","InputRightElement","IconButton","color","variant","icon","HiEyeOff","HiEye","onClick","current","focus","preventScroll","Input","_objectSpread","id","name","type","autoComplete","required","displayName","createQueryString","paginator","querystring","truncate","str","n","ellipsis","tooLong","length","singular","search","substr","lastIndexOf","parseError","error","_error$response","_error$response$data","fallbackErrorMessage","arguments","undefined","errorData","response","data","code","message","navigate","useNavigate","toast","useToast","cookieService","isAuthenticated","window","location","replace","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","remmemberMe","setRemmemberMe","onLoginClick","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_newCredentials$data","_newCredentials$data2","newCredentials","wrap","_context","prev","next","ApiCalls","login","payload","sent","ajaxService","setAuthToken","accessToken","refreshToken","t0","title","position","duration","isClosable","status","stop","apply","Container","maxW","py","base","md","px","sm","Stack","spacing","Logo","textAlign","Heading","size","Text","Box","as","Link","to","bg","boxShadow","borderRadius","value","onChange","e","currentTarget","HStack","justify","Checkbox","colorScheme","isChecked","checked","my","Button"],"sourceRoot":""}